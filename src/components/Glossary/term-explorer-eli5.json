{
  "Workspace": "A Scalekit workspace is a centralized hub where B2B App developers manage their applications and settings. It serves as a command center for efficient application management.",
  "Application": "An application refers to the software product or service that B2B App developers offer to their customers. A Scalekit workspace can contain multiple applications.",
  "App": "An app is another term for an application. It represents the software product or service that B2B App developers sell to their customers.",
  "Environment": "Environments represent different versions or instances of an application, such as a test environment and a live environment. Each environment has its own settings and is isolated for security and organizational purposes.",
  "Team Member": "Team members are individuals from the B2B App developer's company who use Scalekit to manage their application. They can include developers, product managers, or customer support staff.",
  "Dashboard": "The dashboard is the main control panel within Scalekit where team members can configure settings, view analytics, and manage integrations for their application.",
  "Organization": "Organizations are the customers of B2B Apps. For example, if a B2B App sells to businesses, each business is considered an organization with its own set of users.",
  "Admin Portal": "The Admin Portal is a customizable web interface provided by Scalekit on behalf of the B2B App. It enables the customers' IT administrators to set up and manage their Identity Provider configurations.",
  "User": "A user is an individual who uses the B2B App. Users typically belong to a customer organization and may have different roles or permissions within the application.",
  "Connection": "A connection is a link established between the B2B App and a customer's identity provider (such as Okta or Azure AD) to enable Single Sign-On (SSO). Each customer organization can have its own unique connection.",
  "B2B App": "A B2B (Business-to-Business) App is an application designed for use by other businesses or organizations. These apps enable customers to streamline their operations, enhance productivity, or achieve specific objectives.",
  "B2B SaaS App": "A B2B SaaS (Software as a Service) App is a type of B2B App that is delivered over the internet. It allows customers to access and use the application without the need for local installation or maintenance.",
  "Customer": "In the context of B2B Apps, a customer refers to a business or organization that uses the application to meet their specific needs and goals.",
  "Administrator": "An administrator, typically an IT administrator or an employee with IT responsibilities within a customer (of B2B App) organization , is responsible for managing the organization's identity provider configurations.",
  "IdP Simulator": "An IdP (Identity Provider) Simulator is a tool that mimics the behavior of an identity provider. It allows B2B App developers to test and validate their application's integration with various identity providers without requiring a real one.",
  "Service Provider": "A service provider is an entity that offers a product or service to another organization or individual. In the context of Single Sign-On (SSO), a service provider is an application that allows users to access its resources through a connection to an identity provider.",
  "Custom Attribute": "Custom attributes are additional fields that B2B App developers can add to their user data in Scalekit to store extra information about users, such as their department or location.",
  "Normalized Payload": "A normalized payload is a standardized format for data sent from Scalekit to the B2B App. It ensures that the application can easily understand and process the received data.",
  "Directory Sync": "Directory Sync is a module in Scalekit that enables the automatic provisioning and deprovisioning of user accounts based on events from the customers' directory provider.",
  "User Attribute": "User attributes are properties or characteristics that describe a user's identity. In Scalekit, user attributes are used for various purposes, such as authentication, authorization, and access control.",
  "SAML Assertion": "A SAML (Security Assertion Markup Language) Assertion is a statement made by an identity provider indicating that a user has been authenticated and is authorized to access a specific service provider.",
  "OIDC": "OIDC (OpenID Connect) is a standard protocol for authentication that builds on OAuth 2.0. It allows B2B Apps to verify the identity of a user and obtain basic profile information.",
  "OAuth": "OAuth is a standard protocol for authorization that enables B2B Apps to obtain limited access to user data without requiring the user's credentials.",
  "ID Token": "An ID Token is a JSON Web Token (JWT) issued by the identity provider. It contains information about the user's identity.",
  "Directory Provider": "A directory provider is an organization that offers directory services, typically including the customers' identity providers like Okta or Azure AD.",
  "Authorization URL": "The Authorization URL is the URL to which the user is redirected to grant authorization for the B2B App to access their account.",
  "Social Connection": "A social connection allows users to sign in to the B2B App using their social media accounts.",
  "Identity Provider (IdP)": "An Identity Provider (IdP) is a service that verifies the identity of a user and provides information about the user's attributes and permissions.",
  "Webhook": "A webhook is a mechanism that allows the B2B App to receive notifications or updates from Scalekit, such as events related to customers' organizations, users, and other relevant information.",
  "SCIM": "SCIM (System for Cross-domain Identity Management) is a standard protocol for automating the provisioning and deprovisioning of user accounts and their attributes between an identity provider and a service provider.",
  "AI agent identity and attestation": "A process by which an AI agent proves its identity to an authorization server, often using cryptographic evidence (e.g. signed JWT assertions or hardware-backed keys), so the server can trust requests coming from that agent.",
  "Access token": "A credential (often a JWT) issued by the authorization server that the client uses to access the resource server. It represents the client's authorization and typically has an expiry time and scopes attached. The resource server validates this token.",
  "API key": "A simple secret (string) that a client passes to authenticate. Acts as an identifier and credential in one. Often not tied to specific rights unless the server side implements checks. Easy to use, but has no intrinsic expiration or granular scope, making it less secure for broad use.",
  "Authorization server": "The server in OAuth that authenticates clients and issues tokens (could be a part of your SaaS or a third-party IdP like Okta Azure AD, etc.). It essentially says 'Yes, client X, here is a token proving you are authenticated and allowed to do Y.'",
  "Client Credentials Flow": "The OAuth process where a machine client exchanges its client ID and secret for an access token from the auth server. No user involved. The resulting token represents the machine and carries scopes for what it can do.",
  "Dynamic Client Registration": "A protocol (RFC 7591) that allows a client application to programmatically register itself with an authorization server to obtain credentials (client ID/secret, etc.). Useful for large-scale or third-party ecosystems where manual registration of clients is not feasible or to enable self-service integration in a controlled way.",
  "JSON Web Token (JWT)": "A compact, URL-safe token format containing JSON claims, signed (and optionally encrypted) so it can be verified by the receiver. Widely used for access tokens in M2M auth. Contains claims like issuer, subject (client id), audience, scope, and expiration (`exp`). Signed with a secret or private key by the issuer.",
  "Machine-to-Machine (M2M) authentication": "Methods for verifying identity between two automated services or software entities without human intervention. Ensures a client program (machine) is trusted by the service it calls, typically via tokens, keys, or certificates.",
  "Model Context Protocol (MCP)": "A new protocol (spearheaded by Anthropic and others) to standardize how AI models (assistants) can interact with external tools and data. It defines how AI agents can discover available 'tools' (APIs) and the context to call them. For auth, MCP leverages OAuth 2.1 – effectively requiring AI agents to go through a secure authorization process to get access to those tools. Think of it as an evolving standard to make AI <-> SaaS integrations plug-and-play, with security built-in via OAuth.",
  "Mutual TLS (mTLS)": "A transport layer security mechanism where *both client and server present certificates* to mutually authenticate each other during the TLS handshake. Provides strong assurance of identities at connection level and encrypts the traffic. Used in high-security environments and internal service-to-service auth.",
  "OAuth 2.0/OAuth 2.1": "An authorization framework widely used for granting access to resources. OAuth 2.0 defines various *flows* (grant types) for different scenarios (authorization code, client credentials, etc.). OAuth 2.1 is an incremental update that compiles security best practices (PKCE required, no legacy flows, etc.). In M2M context, OAuth's **Client Credentials Grant** is most relevant, allowing a service to get an access token using its own credentials.",
  "OAuth 2.0 Token Exchange (RFC 8693)": "A protocol that lets one token be exchanged for another—for example, an AI agent exchanging its machine-client token for a token scoped to call a downstream service on behalf of a user or another service. Enables delegation and impersonation scenarios.",
  "Proof Key for Code Exchange (PKCE)": "An extension to OAuth used to prevent interception of authorization codes. The client generates a random secret (code verifier) and sends a hashed version (code challenge) in the auth request, then must present the original secret when redeeming the code. Ensures that even if an attacker intercepts the auth code, they can't exchange it without the secret. PKCE is now recommended for any OAuth client that can't secure a client secret – including mobile, SPA, and some machine clients.",
  "Public Key Infrastructure (PKI)": "The system of certificate authorities, processes, and tools for managing digital certificates (like those used in mTLS). Involves issuing certs, distributing them, rotating when expired, revoking if compromised, etc. A robust PKI is needed to effectively use certificate-based auth at scale.",
  "Refresh token": "A long-lived token that can be used to get new access tokens without re-authenticating. In M2M auth, refresh tokens are rarely used because the client can just use its credentials again. Refresh tokens are more for user-based flows to avoid prompting the user frequently.",
  "Resource server": "The API or service that the client wants to use – it receives tokens from clients and decides whether to accept them (by validating them). In our context, your SaaS API is a resource server that expects a valid token for requests.",
  "Service account": "A non-human account used by a software service. In context, it's an identity set up for a machine to use. For example, a service account could be created for 'Data Sync Service' in a customer's tenant on your app. Service accounts have credentials (like client ID/secret or keys) to authenticate, and usually have roles or scopes assigned just like a user would. They enable organization-level or service-level tokens without tying to an actual person.",
  "Scopes": "Strings that define what access is being requested or granted in an OAuth token. For example, `read:inventory` or `payments:create`. Scopes let the token carry permissions, enabling the resource server to allow or deny requests based on scope. Principle of least privilege is implemented by granting minimal scopes.",
  "Zero Trust Security": "A security model where no user or device is inherently trusted, even if inside the network. Every access request must be authenticated, authorized, and continuously validated. For M2M, this means authenticating every service communication, minimizing implicit trust, and verifying identities at multiple layers (network & application). It often involves micro-segmentation and strict identity and access management for every machine identity."
}
