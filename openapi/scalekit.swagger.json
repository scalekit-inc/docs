{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "# Introduction\nScalekit API is modeled around the [REST](https://en.wikipedia.org/wiki/REST) architecture style. That means, our API has predictable resource-oriented URLs, accepts form-encoded request bodies and produces JSON formatted responses, uses standard HTTP verbs and error codes. \n\n## Getting Started\nIf you are just getting started, you can also refer to our [Quick Start Guide](/single-sign-on/quickstart-sso). \n\nApart from REST APIs, we have published SDKs in some of the popular languages as shown below. You can use these SDKs and integrate with Scalekit much faster.\n\n```\nNodeJS\nGo Lang\n```\n\nSome additional instructions around using our APIs\n\n- API Endpoint Host must use the `Environment Domain` of the environment you are targeting.\n- All API communication must be made over `HTTPS`. \n- API requests without appropriate authentication headers will fail with 401 status code. \n\nRead below to understand more about how to authenticate the API calls and how to handle errors appropriately.\n \n\n# Authentication\nScalekit API uses [OAuth2 Client Credentials](https://www.oauth.com/oauth2-servers/access-tokens/client-credentials) based authentication. You can view and manage the necessary information from your `API Config` section in the Scalekit Dashboard.\n\nYou will need the following information to authenticate with Scalekit APIs\n- Client ID\n- Client Secret\n- Environment Domain\n\nYou can obtain a secure token by making `POST` call to the `https://{ENV_DOMAIN}/oauth2/token` endpoint and sending client_id and client_secret as part of the request body. \n\n```\n$ curl https://{ENV_DOMAIN}/oauth/token \\n  -X POST \\n  -H 'Content-Type: application/x-www-form-urlencoded' \\n  -d 'client_id={client_id}' \\n  -d 'client_secret={client_secret}' \\n  -d 'grant_type=client_credentials'\n```\n\n",
    "title": "Scalekit APIs",
    "contact": {
      "name": "Scalekit",
      "url": "https://scalekit.com",
      "email": "support@scalekit.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0"
  },
  "host": "$ENV_DOMAIN",
  "paths": {
    "/api/v1/organizations": {
      "get": {
        "description": "List all Organizations in the Environment. The results are paginated. The response contains page_token that can be used to access the next page of results.",
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations",
        "operationId": "OrganizationService_ListOrganization",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Number of results to be returned. Max supported page_size is 30",
            "name": "page_size",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "page_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsListOrganizationsResponse"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "description": "Creates an Organization. An Organization represents a tenant in the your application",
        "tags": [
          "Organization"
        ],
        "summary": "Create Organization",
        "operationId": "OrganizationService_CreateOrganization",
        "parameters": [
          {
            "description": "Organization details",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Organization details",
              "$ref": "#/definitions/v1organizationsCreateOrganization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsCreateOrganizationResponse"
            }
          },
          "201": {
            "description": "Created Successfully",
            "schema": {}
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/-/connections": {
      "get": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_ListConnections2",
        "parameters": [
          {
            "type": "string",
            "name": "organization_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsListConnectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/-/connections/{id}": {
      "get": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_GetConnection2",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "organization_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsGetConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/-/connections/{id}:disable": {
      "patch": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_DisableConnection2",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "organization_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsToggleConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/-/connections/{id}:enable": {
      "patch": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_EnableConnection2",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "organization_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsToggleConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/-/connections:search": {
      "get": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_GetConnectionByDomain",
        "parameters": [
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsGetConnectionByDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Organization",
        "operationId": "OrganizationService_GetOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the Org to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "External Id of the Org to update",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsGetOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete Organization",
        "operationId": "OrganizationService_DeleteOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the Org to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "External Id of the Org to update",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update Organization",
        "operationId": "OrganizationService_UpdateOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the Org to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Organization Parameters to be updated",
              "$ref": "#/definitions/v1organizationsUpdateOrganization"
            }
          },
          {
            "type": "string",
            "description": "External Id of the Org to update",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsUpdateOrganizationResponse"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}/portal_links": {
      "get": {
        "description": "Returns the Customer portal link if it exists. Use Generate Customer portal link to create and fetch a link",
        "tags": [
          "Customer Portal"
        ],
        "summary": "Get Portal link",
        "operationId": "OrganizationService_GetCustomerPortalLink",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsCustomerPortalLinksResponse"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "put": {
        "description": "Generates a Customer portal link. The customer portal will be used by the IT Admins to create and manage the SSO connection in their Org. The customer portal link generate via API will be valid for 1 week.",
        "tags": [
          "Customer Portal"
        ],
        "summary": "Generate Portal link",
        "operationId": "OrganizationService_GenerateCustomerPortalLink",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/organizationsCustomerPortalLinksResponse"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "description": "Revokes and deletes a Customer portal link.",
        "tags": [
          "Customer Portal"
        ],
        "summary": "Delete Portal link",
        "operationId": "OrganizationService_DeleteCustomerPortalLink",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request. The expected parameters are missing",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "401": {
            "description": "Invalid API Key Provided",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Access Denied. API key does not have permissions to perform the request",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Requested resource does not exist",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "429": {
            "description": "Too many requests. API Rate limits exceeded",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "500": {
            "description": "Server Error. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "503": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "504": {
            "description": "Service Unavailable. Something went wrong on Scalekit's end",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/connections": {
      "get": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_ListConnections",
        "parameters": [
          {
            "type": "string",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsListConnectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/connections/{id}": {
      "get": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_GetConnection",
        "parameters": [
          {
            "type": "string",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsGetConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/connections/{id}:disable": {
      "patch": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_DisableConnection",
        "parameters": [
          {
            "type": "string",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsToggleConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/connections/{id}:enable": {
      "patch": {
        "tags": [
          "ConnectionService"
        ],
        "operationId": "ConnectionService_EnableConnection",
        "parameters": [
          {
            "type": "string",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "external_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connectionsToggleConnectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "commonsRegionCode": {
      "description": " - REGION_CODE_UNSPECIFIED: If the region code is unspecified the selected region will automatically be decided based on the origin of the call.",
      "type": "string",
      "default": "REGION_CODE_UNSPECIFIED",
      "enum": [
        "REGION_CODE_UNSPECIFIED",
        "US",
        "EU"
      ]
    },
    "connectionsConfigurationType": {
      "type": "string",
      "default": "CONFIGURATION_TYPE_UNSPECIFIED",
      "enum": [
        "CONFIGURATION_TYPE_UNSPECIFIED",
        "DISCOVERY",
        "MANUAL"
      ]
    },
    "connectionsConnection": {
      "type": "object",
      "properties": {
        "attribute_mapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configuration_type": {
          "$ref": "#/definitions/connectionsConfigurationType"
        },
        "debug_enabled": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "login_initiation_uri": {
          "type": "string"
        },
        "logout_uri": {
          "type": "string"
        },
        "oidc_config": {
          "$ref": "#/definitions/connectionsOIDCConnectionConfig"
        },
        "organization_id": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/connectionsConnectionProvider"
        },
        "saml_config": {
          "$ref": "#/definitions/connectionsSAMLConnectionConfigResponse"
        },
        "status": {
          "$ref": "#/definitions/connectionsConnectionStatus"
        },
        "test_connection_uri": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/connectionsConnectionType"
        },
        "ui_button_title": {
          "type": "string"
        }
      }
    },
    "connectionsConnectionProvider": {
      "type": "string",
      "default": "CONNECTION_PROVIDER_UNSPECIFIED",
      "enum": [
        "CONNECTION_PROVIDER_UNSPECIFIED",
        "OKTA",
        "GOOGLE",
        "MICROSOFT_AD",
        "AUTH0",
        "ONELOGIN",
        "PING_IDENTITY",
        "JUMPCLOUD",
        "CUSTOM"
      ]
    },
    "connectionsConnectionStatus": {
      "type": "string",
      "default": "CONNECTION_STATUS_UNSPECIFIED",
      "enum": [
        "CONNECTION_STATUS_UNSPECIFIED",
        "DRAFT",
        "IN_PROGRESS",
        "COMPLETED"
      ]
    },
    "connectionsConnectionType": {
      "type": "string",
      "default": "INVALID",
      "enum": [
        "INVALID",
        "OIDC",
        "SAML",
        "PASSWORD"
      ]
    },
    "connectionsGetConnectionByDomainResponse": {
      "type": "object",
      "properties": {
        "connection_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/connectionsConnectionStatus"
        },
        "type": {
          "$ref": "#/definitions/connectionsConnectionType"
        },
        "ui_button_title": {
          "type": "string"
        }
      }
    },
    "connectionsGetConnectionResponse": {
      "type": "object",
      "properties": {
        "connection": {
          "$ref": "#/definitions/connectionsConnection"
        }
      }
    },
    "connectionsIDPCertificate": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string"
        },
        "create_time": {
          "type": "string",
          "format": "date-time"
        },
        "expiry_time": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        }
      }
    },
    "connectionsListConnection": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/connectionsConnectionProvider"
        },
        "status": {
          "$ref": "#/definitions/connectionsConnectionStatus"
        },
        "type": {
          "$ref": "#/definitions/connectionsConnectionType"
        },
        "ui_button_title": {
          "type": "string"
        }
      }
    },
    "connectionsListConnectionsResponse": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/connectionsListConnection"
          }
        }
      }
    },
    "connectionsNameIdFormat": {
      "type": "string",
      "default": "NAME_ID_FORMAT_NIL",
      "enum": [
        "NAME_ID_FORMAT_NIL",
        "UNSPECIFIED",
        "EMAIL",
        "TRANSIENT",
        "PERSISTENT"
      ]
    },
    "connectionsOIDCConnectionConfig": {
      "type": "object",
      "properties": {
        "authorize_uri": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "discovery_endpoint": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "jwks_uri": {
          "type": "string"
        },
        "pkce_enabled": {
          "type": "boolean"
        },
        "redirect_uri": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectionsOIDCScope"
          }
        },
        "token_auth_type": {
          "$ref": "#/definitions/connectionsTokenAuthType"
        },
        "token_uri": {
          "type": "string"
        },
        "user_info_uri": {
          "type": "string"
        }
      }
    },
    "connectionsOIDCScope": {
      "type": "string",
      "default": "OIDC_SCOPE_UNSPECIFIED",
      "enum": [
        "OIDC_SCOPE_UNSPECIFIED",
        "openid",
        "profile",
        "email",
        "address",
        "phone"
      ]
    },
    "connectionsRequestBinding": {
      "type": "string",
      "default": "REQUEST_BINDING_UNSPECIFIED",
      "enum": [
        "REQUEST_BINDING_UNSPECIFIED",
        "HTTP_POST",
        "HTTP_REDIRECT"
      ]
    },
    "connectionsSAMLConnectionConfigResponse": {
      "type": "object",
      "properties": {
        "allow_idp_initiated_login": {
          "type": "boolean"
        },
        "assertion_encrypted": {
          "type": "boolean"
        },
        "default_redirect_uri": {
          "type": "string"
        },
        "force_authn": {
          "type": "boolean"
        },
        "idp_certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/connectionsIDPCertificate"
          }
        },
        "idp_entity_id": {
          "type": "string"
        },
        "idp_metadata_url": {
          "type": "string"
        },
        "idp_name_id_format": {
          "$ref": "#/definitions/connectionsNameIdFormat"
        },
        "idp_slo_request_binding": {
          "$ref": "#/definitions/connectionsRequestBinding"
        },
        "idp_slo_url": {
          "type": "string"
        },
        "idp_sso_request_binding": {
          "$ref": "#/definitions/connectionsRequestBinding"
        },
        "idp_sso_url": {
          "type": "string"
        },
        "saml_signing_option": {
          "$ref": "#/definitions/connectionsSAMLSigningOptions"
        },
        "sp_assertion_url": {
          "type": "string"
        },
        "sp_entity_id": {
          "type": "string"
        },
        "sp_metadata_url": {
          "type": "string"
        },
        "ui_button_title": {
          "type": "string"
        },
        "want_request_signed": {
          "type": "boolean"
        }
      }
    },
    "connectionsSAMLSigningOptions": {
      "type": "string",
      "title": "enums all",
      "default": "SAML_SIGNING_OPTIONS_UNSPECIFIED",
      "enum": [
        "SAML_SIGNING_OPTIONS_UNSPECIFIED",
        "NO_SIGNING",
        "SAML_ONLY_RESPONSE_SIGNING",
        "SAML_ONLY_ASSERTION_SIGNING",
        "SAML_RESPONSE_ASSERTION_SIGNING"
      ]
    },
    "connectionsToggleConnectionResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "connectionsTokenAuthType": {
      "type": "string",
      "default": "TOKEN_AUTH_TYPE_UNSPECIFIED",
      "enum": [
        "TOKEN_AUTH_TYPE_UNSPECIFIED",
        "URL_PARAMS",
        "BASIC_AUTH"
      ]
    },
    "organizationsCreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organizationsOrganization"
        }
      }
    },
    "organizationsCustomerPortalLinksResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationsLink"
          }
        }
      }
    },
    "organizationsGetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organizationsOrganization"
        }
      }
    },
    "organizationsLink": {
      "type": "object",
      "properties": {
        "expire_time": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "organizationsListOrganizationsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/organizationsOrganization"
          }
        },
        "total_size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "organizationsOrganization": {
      "type": "object",
      "required": [
        "create_time"
      ],
      "properties": {
        "create_time": {
          "description": "Created Time",
          "type": "string",
          "format": "date-time",
          "title": "Created Time",
          "example": "2023-03-03 12:30"
        },
        "display_name": {
          "description": "Display Name of the Organization",
          "type": "string",
          "title": "Name of the org to be used in display",
          "example": "Acme Corp"
        },
        "external_id": {
          "description": "External Id . This can be used to store a unique identifier that can help correalate scalekit Org with your SaaS app's tenant",
          "type": "string",
          "title": "External Id is useful to store a unique identifier for a given Org that. The unique Identifier can be the id of your tenant / org in your SaaSApp",
          "example": "my_unique_id"
        },
        "id": {
          "description": "Organization ID",
          "type": "string",
          "title": "Id",
          "example": "org_2123312131125533"
        },
        "metadata": {
          "description": "Key value pairs extension attributes.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "region_code": {
          "description": "Region code . Only US is supported ",
          "title": "Optional regioncode",
          "$ref": "#/definitions/commonsRegionCode",
          "example": "US"
        },
        "update_time": {
          "description": "Updated Time",
          "type": "string",
          "format": "date-time",
          "title": "Updated time"
        }
      }
    },
    "organizationsUpdateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/organizationsOrganization"
        }
      }
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "type": "object",
      "properties": {
        "@type": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1organizationsCreateOrganization": {
      "type": "object",
      "properties": {
        "display_name": {
          "description": "Display Name of the Organization",
          "type": "string",
          "title": "Name of the org to be used in display",
          "example": "Acme Corp"
        },
        "external_id": {
          "description": "External Id . This can be used to store a unique identifier that can help correalate scalekit Org with your SaaS app's tenant",
          "type": "string",
          "title": "External Id is useful to store a unique identifier for a given Org that. The unique Identifier can be the id of your tenant / org in your SaaSApp",
          "example": "my_unique_id"
        },
        "metadata": {
          "description": "Key value pairs extension attributes.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1organizationsUpdateOrganization": {
      "description": "For update messages ensure the indexes are same as the base model itself.",
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string"
        },
        "external_id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://$ENV_DOMAIN/oauth/token"
    }
  },
  "security": [
    {
      "OAuth2": []
    }
  ],
  "tags": [
    {
      "description": "Organization",
      "name": "Organization"
    },
    {
      "name": "ConnectionService"
    }
  ],
  "externalDocs": {
    "description": "Scalekit Developer documentation",
    "url": "https://docs.scalekit.com/"
  }
}
